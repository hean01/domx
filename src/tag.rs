use std;

/// Enumeration that represents HTML tags.
#[derive(Clone, PartialEq, Debug)]
pub enum Tag {
    A,
    ABBR,
    ACRONYM,
    ADDRESS,
    ARTICLE, // HTML5
    ASIDE, // HTML5
    B,
    BDO,
    BIG,
    BLOCKQUOTE,
    BODY,
    BR,
    BUTTON,
    CANVAS, // HTML5
    CITE,
    CODE,
    DD,
    DFN,
    DIV,
    DL,
    DT,
    EM,
    FIELDSET,
    FIGCAPTION, // HTML5
    FIGURE, // HTML5
    FOOTER, // HTML5
    FORM,
    H1, H2, H3, H4, H5, H6,
    HEAD,
    HEADER, // HTML5
    HGROUP, // HTML5
    HR,
    HTML,
    I,
    IFRAME,
    IMG,
    INPUT,
    KBD,
    LABEL,
    LI,
    LINK,
    MAP,
    MAIN,
    META,
    NAV,
    NOSCRIPT,
    OBJECT,
    OL,
    OPTION,
    OUTPUT, // HTML5
    P,
    PRE,
    Q,
    SAMP,
    SCRIPT,
    SECTION, // HTML5
    SELECT,
    SMALL,
    SPAN,
    STRONG,
    STYLE,
    SUB,
    SUP,
    TABLE,
    TEXTAREA,
    TFOOT,
    TIME,
    TITLE,
    TT,
    UL,
    VAR,
    VIDEO, // HTML5
    WBR, // HTML5
}

impl std::fmt::Display for Tag {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match *self {
            Tag::A => f.write_str("a"),
            Tag::ABBR => f.write_str("abr"),
            Tag::ACRONYM => f.write_str("acronym"),
            Tag::ADDRESS => f.write_str("address"),
            Tag::ARTICLE => f.write_str("article"),
            Tag::ASIDE => f.write_str("aside"),
            Tag::B => f.write_str("b"),
            Tag::BDO => f.write_str("bdo"),
            Tag::BIG => f.write_str("big"),
            Tag::BLOCKQUOTE => f.write_str("BLOCKQUOTE"),
            Tag::BODY => f.write_str("body"),
            Tag::BR => f.write_str("br"),
            Tag::BUTTON => f.write_str("button"),
            Tag::CANVAS => f.write_str("cavas"),
            Tag::CITE => f.write_str("cite"),
            Tag::CODE => f.write_str("code"),
            Tag::DD => f.write_str("dd"),
            Tag::DFN => f.write_str("dfn"),
            Tag::DIV => f.write_str("div"),
            Tag::DL => f.write_str("dl"),
            Tag::DT => f.write_str("dt"),
            Tag::EM => f.write_str("em"),
            Tag::FIELDSET => f.write_str("fieldset"),
            Tag::FIGCAPTION => f.write_str("figcaption"),
            Tag::FIGURE => f.write_str("figure"),
            Tag::FOOTER => f.write_str("footer"),
            Tag::FORM => f.write_str("form"),
            Tag::H1 => f.write_str("h1"),
            Tag::H2 => f.write_str("h2"),
            Tag::H3 => f.write_str("h3"),
            Tag::H4 => f.write_str("h4"),
            Tag::H5 => f.write_str("h5"),
            Tag::H6 => f.write_str("h6"),
            Tag::HEAD => f.write_str("head"),
            Tag::HEADER => f.write_str("header"),
            Tag::HGROUP => f.write_str("hgroup"),
            Tag::HR => f.write_str("hr"),
            Tag::HTML => f.write_str("html"),
            Tag::I => f.write_str("i"),
            Tag::IFRAME => f.write_str("iframe"),
            Tag::INPUT => f.write_str("input"),
            Tag::IMG => f.write_str("img"),
            Tag::KBD => f.write_str("kdb"),
            Tag::LABEL => f.write_str("label"),
            Tag::LI => f.write_str("li"),
            Tag::LINK => f.write_str("link"),
            Tag::MAIN => f.write_str("main"),
            Tag::MAP => f.write_str("map"),
            Tag::META => f.write_str("meta"),
            Tag::NAV => f.write_str("nav"),
            Tag::NOSCRIPT => f.write_str("noscript"),
            Tag::OBJECT => f.write_str("object"),
            Tag::OL => f.write_str("ol"),
            Tag::OPTION => f.write_str("option"),
            Tag::OUTPUT => f.write_str("output"),
            Tag::P => f.write_str("p"),
            Tag::PRE => f.write_str("pre"),
            Tag::Q => f.write_str("q"),
            Tag::SAMP => f.write_str("samp"),
            Tag::SCRIPT => f.write_str("script"),
            Tag::SECTION => f.write_str("section"),
            Tag::SELECT => f.write_str("select"),
            Tag::SMALL => f.write_str("small"),
            Tag::SPAN => f.write_str("span"),
            Tag::STRONG => f.write_str("strong"),
            Tag::STYLE => f.write_str("style"),
            Tag::SUB => f.write_str("sub"),
            Tag::SUP => f.write_str("sup"),
            Tag::TABLE => f.write_str("table"),
            Tag::TEXTAREA => f.write_str("textarea"),
            Tag::TFOOT => f.write_str("tfoot"),
            Tag::TIME => f.write_str("time"),
            Tag::TITLE => f.write_str("title"),
            Tag::TT => f.write_str("tt"),
            Tag::UL => f.write_str("ul"),
            Tag::VAR => f.write_str("var"),
            Tag::VIDEO => f.write_str("video"),
            Tag::WBR => f.write_str("wbr"),
        }
    }
}

/// Parse an Tag type from string
///
/// # Examples
///
/// ```
/// use domx;
/// let e = "code".parse::<domx::Tag>().unwrap();
/// println!("<{}>", e);
/// ```
impl std::str::FromStr for Tag {
    type Err = ();

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "a" => Ok(Tag::A),
            "abbr" => Ok(Tag::ABBR),
            "acronym" => Ok(Tag::ACRONYM),
            "address" => Ok(Tag::ADDRESS),
            "article" => Ok(Tag::ARTICLE),
            "aside" => Ok(Tag::ASIDE),
            "b" => Ok(Tag::B),
            "bdo" => Ok(Tag::BDO),
            "big" => Ok(Tag::BIG),
            "blockquote" => Ok(Tag::BLOCKQUOTE),
            "body" => Ok(Tag::BODY),
            "br" => Ok(Tag::BR),
            "button" => Ok(Tag::BUTTON),
            "canvas" => Ok(Tag::CANVAS),
            "cite" => Ok(Tag::CITE),
            "code" => Ok(Tag::CODE),
            "dd" => Ok(Tag::DD),
            "dfn" => Ok(Tag::DFN),
            "div" => Ok(Tag::DIV),
            "dl" => Ok(Tag::DL),
            "dt" => Ok(Tag::DT),
            "em" => Ok(Tag::EM),
            "fieldset" => Ok(Tag::FIELDSET),
            "figcaption" => Ok(Tag::FIGCAPTION),
            "figure" => Ok(Tag::FIGURE),
            "footer" => Ok(Tag::FOOTER),
            "form" => Ok(Tag::FORM),
            "h1" => Ok(Tag::H1),
            "h2" => Ok(Tag::H2),
            "h3" => Ok(Tag::H3),
            "h4" => Ok(Tag::H4),
            "h5" => Ok(Tag::H5),
            "h6" => Ok(Tag::H6),
            "head" => Ok(Tag::HEAD),
            "header" => Ok(Tag::HEADER),
            "hgroup" => Ok(Tag::HGROUP),
            "hr" => Ok(Tag::HR),
            "html" => Ok(Tag::HTML),
            "i" => Ok(Tag::I),
            "iframe" => Ok(Tag::IFRAME),
            "input" => Ok(Tag::INPUT),
            "img" => Ok(Tag::IMG),
            "kbd" => Ok(Tag::KBD),
            "label" => Ok(Tag::LABEL),
            "li" => Ok(Tag::LI),
            "link" => Ok(Tag::LINK),
            "map" => Ok(Tag::MAP),
            "main" => Ok(Tag::MAIN),
            "meta" => Ok(Tag::META),
            "nav" => Ok(Tag::NAV),
            "noscript" => Ok(Tag::NOSCRIPT),
            "object" => Ok(Tag::OBJECT),
            "ol" => Ok(Tag::OL),
            "option" => Ok(Tag::OPTION),
            "output" => Ok(Tag::OUTPUT),
            "p" => Ok(Tag::P),
            "pre" => Ok(Tag::PRE),
            "q" => Ok(Tag::Q),
            "samp" => Ok(Tag::SAMP),
            "script" => Ok(Tag::SCRIPT),
            "section" => Ok(Tag::SECTION),
            "select" => Ok(Tag::SELECT),
            "small" => Ok(Tag::SMALL),
            "span" => Ok(Tag::SPAN),
            "strong" => Ok(Tag::STRONG),
            "style" => Ok(Tag::STYLE),
            "sub" => Ok(Tag::SUB),
            "sup" => Ok(Tag::SUP),
            "table" => Ok(Tag::TABLE),
            "textarea" => Ok(Tag::TEXTAREA),
            "tfoot" => Ok(Tag::TFOOT),
            "time" => Ok(Tag::TIME),
            "title" => Ok(Tag::TITLE),
            "tt" => Ok(Tag::TT),
            "ul" => Ok(Tag::UL),
            "var" => Ok(Tag::VAR),
            "video" => Ok(Tag::VIDEO),
            "wbr" => Ok(Tag::WBR),
            _ => Err(())
        }
    }
}
